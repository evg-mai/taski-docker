#test
name: Main Taski Workflow

#triggers
on: [push]
#  push:
#    branches:
#      -main

#tasks
jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_user
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 1s --health-retries 5

    steps:
      #get source code
      - name: Check out repo code
        uses: actions/checkout@v4
      #runs "tree"
      - name: Print project tree
        run: tree .
      #install python
      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      #install pip, ruff
      - name: Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.8.0
          pip install -r ./backend/requirements.txt
      #check by ruff
      - name: Lint by ruff
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_user
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m ruff check backend/
          cd backend/
          python manage.py migrate
          python manage.py test

  builds_and_dockerhub:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    #start docker
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    #authorization
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCUSER }}
        password: ${{ secrets.DCAT }}
    #push
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: ./backend/
        push: true
        tags: ${{ vars.DOCUSER }}/taski_backend:latest

  frontend_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      # Это готовый воркфлоу для установки Node.js на раннер
      uses: actions/setup-node@v3
      with:
        # Это параметр воркфлоу, указывающий нужную версию Node.js
        node-version: 18

    - name: Install dependencies
      # Эта команда устанавливает зависимости для фронтенда
      run: |
        cd frontend/
        npm ci

    - name: Test frontend
      # Запускаем тесты
      run: |
        cd frontend/
        npm run test
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: userr12345/taski_frontend:latest
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          # Тут вместо username должен быть ваш логин на Docker Hub
          tags: userr12345/taski_gateway:latest
  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех образов Taski
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "taski"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере, 
        # с которым установлено соединение
        script: |
          cd taski
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Выполняет миграции и сбор статики
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен!
